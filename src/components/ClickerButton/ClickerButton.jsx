import React, { useState, useEffect, useContext } from 'react';
import './ClickerButton.scss';
import { main_context } from '../Hooks/useStats_main';
import { useTelegram } from '../Hooks/useTelegram';
import { getUserInfo, putIncrementClick, putUserBan } from '../../http/User';
import CryptoJS from 'crypto-js';

function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

const getRandomTransform = () => {
  const amountX = Math.random() * 12 + 1; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ–ª–∏—á–∏–Ω—ã –¥–≤–∏–∂–µ–Ω–∏—è
  const amountY = Math.random() * 12 + 1; 
  const rotate = (Math.random() * 12) - 6;
  return `translate(${amountX}px, ${amountY}px) rotate(${rotate}deg)`;
};

const getDirection = () => {
  const randomX = Math.floor(Math.random() * 101) - 50; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -100 –¥–æ 100
  return randomX;
};


export const ClickerButton = (props) => {

  const { telegram_id } = useTelegram()

  let { setCurrentBg, bgList, setCurentNumberOfClicks, continuousClicksForPost, setContinuousClicksForPost } = useContext(main_context);

  const [clicks, setClicks] = useState([]);
  const [emojiIndex, setEmojiIndex] = useState(0); // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —ç–º–æ–¥–∑–∏
  const [continuousClicks, setContinuousClicks] = useState(0); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
  const emojis = ['üò≠', 'üò¢', 'üòñ', 'üòû', 'üòï', 'üôÅ', 'üòê', 'üòè', 'üòâ', 'üòå', 'üòé', 'ü•∞', 'ü§©']; // –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–æ–¥–∑–∏
  const clicksLimit = 16; // –õ–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤
  const timeoutDelay = 5000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  const [userInfo, setUserInfo] = useState({});
  const [currentBoost, setCurrentBoost] = useState(1)

  //–æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
  const [clickTimestamps, setClickTimestamps] = useState([]);
  const clickIntervalLimit = 20; // –õ–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤ –∑–∞ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É
  const clickIntervalWindow = 1000; // –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–ª–∏–∫–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)

  const handleClick = (event) => {
    const currentTime = Date.now();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É—á–µ—Ç–∞ –∫–ª–∏–∫–æ–≤
    const clickWindowStart = currentTime - clickIntervalWindow;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    const recentClicks = clickTimestamps.filter(timestamp => timestamp > clickWindowStart);

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (recentClicks.length < clickIntervalLimit) {
      const button = event.currentTarget.querySelector('.ClickerButton-button');
      let direction = getDirection();
      let directionClass = direction < 0 ? 'click-left' : 'click-right';

      setTimeout(() => {
        const randomTransform = getRandomTransform();
        button.style.transform = randomTransform;
        void button.offsetWidth;
      }, 100); // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ 0.1 —Å–µ–∫—É–Ω–¥—ã

      const boundingRect = event.currentTarget.getBoundingClientRect();
      const newClick = {
        id: getRandomInt(999999999),
        x: event.clientX - boundingRect.left,
        y: event.clientY - boundingRect.top,
        opacity: 1,
        clickColor: `rgb(${getRandomInt(255)}, ${getRandomInt(255)}, ${getRandomInt(255)})`,
        direction: directionClass,
      };
      setClicks((state) => [...state, newClick]);
      setContinuousClicks(prevClicks => prevClicks + 1);
      setContinuousClicksForPost(prevClicks => prevClicks + 1);
      setClickTimestamps([...recentClicks, currentTime]);

      setTimeout(() => {
        setClicks(prevClicks => prevClicks.filter((click) => click.id !== newClick.id));
      }, 1000);
    } else {
      // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ä—ã
      console.log("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏");
      putUserBan(telegram_id)
    }
  };

  //–ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–∫–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –º–µ–Ω—è–µ–º emoji –Ω–∞–∑–∞–¥
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      setContinuousClicks(prevClicks => Math.max(0, prevClicks - clicksLimit));
      
      // setContinuousClicksForPost(0);
      if (emojiIndex !== 0) {
        setEmojiIndex(prevIndex => (prevIndex - 1) % emojis.length);
        setCurrentBg(prevIndex => (prevIndex - 1) % emojis.length);
      }
    }, timeoutDelay);

    return () => {
      clearTimeout(timeoutId);
    };
  }, [continuousClicks, emojiIndex]);

  const encryptNumber = (number, key) => {
    const encryptedNumber = xorEncrypt(parseInt(number), parseInt(key));
    return encryptedNumber;
  };

  const xorEncrypt = (number, key) => {
    return number ^ key;
  };

  //–ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–∏–∏ –∫–ª–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
  useEffect(() => {
    let timeoutId = setTimeout(() => {
      if (continuousClicksForPost !== 0) {
        putIncrementClick(telegram_id, setCurentNumberOfClicks, setContinuousClicksForPost, continuousClicksForPost);
      }
    }, 1000);

    if (continuousClicksForPost >= 120) {
      putIncrementClick(telegram_id, setCurentNumberOfClicks, setContinuousClicksForPost, continuousClicksForPost);
    }

    return () => {
      clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    };
  }, [continuousClicksForPost, telegram_id, setCurentNumberOfClicks, setContinuousClicksForPost]);


  //–í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–ª–∏–∫–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      const button = document.querySelector('.ClickerButton-button');
      if (button) {
        button.style.transform = 'translate(0px, 0px) rotate(0deg)';
      }
    }, 1500);

    return () => clearTimeout(timeoutId); // –æ—Ç–º–µ–Ω—è–µ–º timeout –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  }, [continuousClicks]);

  useEffect(() => {
    getUserInfo(telegram_id, setUserInfo)
  }, [])

  //–ú–µ–Ω—è–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±—É—Å—Ç–æ–≤
  useEffect(() => {
    let user_boost = 0
    let user_xboost = 1
    userInfo?.bought?.map((bought_item) => {
      bought_item?.items?.boost?.map((boost_item) => {
        user_boost += boost_item.boost
        user_xboost *= boost_item.x_boost
      })
    })
    setCurrentBoost((1 + user_boost) * user_xboost)
  }, [userInfo])

  //–£–ª—É—á—à–∞–µ–º –Ω–∞—Å—Ä–æ–µ–Ω–∏–µ emoji
  useEffect(() => {
    if (continuousClicks >= clicksLimit) {
      if (emojiIndex != emojis.length - 1) {
        setEmojiIndex(prevIndex => (prevIndex + 1) % emojis.length);
        setCurrentBg(prevIndex => (prevIndex + 1) % emojis.length);
      }

      setContinuousClicks(0);
    }
  }, [continuousClicks]);

  return (
    <div className="ClickerButton-container" onClick={handleClick}>
      <button className="ClickerButton-button">
        {emojis[emojiIndex]}
      </button>
      {clicks.map((click, index) => (
        <span
          key={click.id}
          className={`ClickerButton-click ${click.direction}`}
          style={{
            '--clickY': `${click.y}px`,
            top: click.y,
            left: click.x,
            opacity: click.opacity,
            color: click.clickColor
          }}
        >
          {currentBoost}
        </span>
      ))}
    </div>
  );
};
